resources:
  - name: debWebhook
    type: IncomingWebhook
    configuration:
      webhookName: acmeDebDistribute

  - name: debAql
    type: Aql
    configuration:
      sourceArtifactory: acme_co_artifactory
      query: items.find({"$and":[{"$or":[{"repo":{"$eq":"deb"}},{"repo":{"$eq":"acme_sthings_deb_local"}}]},{"$or":[{"name":{"$match":"${app_name}-*-${app_version}*"}},{"name":{"$match":"${app_name}_${app_version}_*"}}]}]})
  
  - name: debReleaseBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: acmeDistributionIntegration
      name: ${app_name}
      version: ${app_version}
  
  - name: debSignedBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: acmeDistributionIntegration
      name: ${app_name}
      version: ${app_version}

  - name: debDistributionRules
    type: DistributionRule
    configuration:
      sourceDistribution: acmeDistributionIntegration
      serviceName: "*"
      siteName: "*"
      cityName: "*"
      countryCodes:
        - "CN" 
  
pipelines:
  - name: CreateDebDistribution
    steps:
    - name: ExtractFileName
      type: Bash
      configuration:
        inputResources:
          - name: debWebhook
        outputResources:
          - name: debAql
      execution:
          onExecute:
            - set_payload debWebhook "$res_debWebhook_payload"
            - echo "$res_debWebhook_payload" | jq '.' > payload.json
            - set_payload debWebhook payload.json --file
            - cat payload.json
            - read_json payload.json "data.name"
            - add_run_variables distribution_filename=$(read_json payload.json "data.name")
            - echo $distribution_filename
            - add_run_variables app_name=$(echo $distribution_filename | awk -F_ '{print $1}')
            - echo $app_name
            - add_run_variables app_version=$(echo $distribution_filename | awk -F_ '{print $2}')
            - echo $app_version
            - add_run_variables distro_version=$(echo $distribution_filename | awk -F_ '{print $2}' | sed 's/[~]/-/g')
            - echo $distro_version
            
    - name: bundle
      type: CreateReleaseBundle
      configuration:
        releaseBundleName: ${app_name}
        releaseBundleVersion: ${distro_version}
        dryRun: false
        sign: false
        description: "Application deb distribution"
        inputResources:
          - name: debAql
            trigger: true
        outputResources:
          - name: debReleaseBundle
        releaseNotes:
          syntax: markdown
          content: |
            ## Heading
              * Bullet
              * Points
      execution:
        onSuccess: 
          - |
            resource_directory=$(find_resource_variable debReleaseBundle resourcePath)
            env_file_path="$resource_directory/debReleaseBundle.env"
            echo "name=$(find_step_configuration_value releaseBundleName)" >> $env_file_path
            echo "version=$(find_step_configuration_value releaseBundleVersion)" >> $env_file_path
              
    - name: sign
      type: SignReleaseBundle
      configuration:
        inputResources:
          - name: debReleaseBundle
        outputResources:
          - name: debSignedBundle
      execution:
        onSuccess: 
          - |
            resource_directory=$(find_resource_variable debSignedBundle resourcePath)
            env_file_path="$resource_directory/debSignedBundle.env"
            echo "name=$(find_resource_variable $inputReleaseBundleResourceName name)" >> $env_file_path
            echo "version=$(find_resource_variable $inputReleaseBundleResourceName version)" >> $env_file_path

    # - name: distribute
    #   type: DistributeReleaseBundle
    #   configuration:
    #     dryRun: false
    #     inputResources:
    #       - name: debSignedBundle
    #       - name: debDistributionRules